/*
 * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
 
plugins {
    id 'java'
}

ext.ballerinaLangVersion = project.ballerinaLangVersion
ext.stdlibMimeVersion = project.stdlibMimeVersion
ext.stdlibIoVersion = project.stdlibIoVersion
ext.stdlibLogVersion = project.stdlibLogVersion
ext.stdlibRegexVersion = project.stdlibRegexVersion
ext.stdlibAuthVersion = project.stdlibAuthVersion
ext.stdlibJwtVersion = project.stdlibJwtVersion
ext.stdlibOAuth2Version = project.stdlibOAuth2Version
ext.stdlibCacheVersion = project.stdlibCacheVersion
ext.stdlibTimeVersion = project.stdlibTimeVersion
ext.stdlibUrlVersion = project.stdlibUrlVersion
ext.stdlibCryptoVersion = project.stdlibCryptoVersion
ext.stdlibFileVersion = project.stdlibFileVersion
ext.stdlibOsVersion = project.stdlibOsVersion
ext.stdlibTaskVersion = project.stdlibTaskVersion
ext.stdlibUuidVersion = project.stdlibUuidVersion

group project.group
version project.version

def ballerinaModulePath = "../"
def ballerinaDistPath = "${buildDir}/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
def ballerinaDist = "${buildDir}/copy/target/ballerina-distribution"

configurations {
    jbalTools
    ballerinaStdLibs
}

repositories {
    mavenCentral()
    maven {
        url = 'https://maven.pkg.github.com/ballerina-platform/ballerina-lang'
        credentials {
            username System.getenv("packageUser")
            password System.getenv("packagePAT")
        }
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
    implementation group: 'org.ballerinalang', name: 'ballerina-lang', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-tools-api', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-parser', version: "${ballerinaLangVersion}"

    /* JBallerina Tools */
    jbalTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
    /* Standard libraries */
    ballerinaStdLibs "org.ballerinalang:regex-ballerina:${stdlibRegexVersion}"
    ballerinaStdLibs "org.ballerinalang:os-ballerina:${stdlibOsVersion}"
    ballerinaStdLibs "org.ballerinalang:http-ballerina:${stdlibHttpVersion}"
    ballerinaStdLibs "org.ballerinalang:log-ballerina:${stdlibLogVersion}"
    ballerinaStdLibs "org.ballerinalang:io-ballerina:${stdlibIoVersion}"
    ballerinaStdLibs "org.ballerinalang:url-ballerina:${stdlibUrlVersion}"

    /* Transitive dependencies */
    ballerinaStdLibs "org.ballerinalang:mime-ballerina:${stdlibMimeVersion}"
    ballerinaStdLibs "org.ballerinalang:auth-ballerina:${stdlibAuthVersion}"
    ballerinaStdLibs "org.ballerinalang:jwt-ballerina:${stdlibJwtVersion}"
    ballerinaStdLibs "org.ballerinalang:oauth2-ballerina:${stdlibOAuth2Version}"
    ballerinaStdLibs "org.ballerinalang:cache-ballerina:${stdlibCacheVersion}"
    ballerinaStdLibs "org.ballerinalang:time-ballerina:${stdlibTimeVersion}"
    ballerinaStdLibs "org.ballerinalang:crypto-ballerina:${stdlibCryptoVersion}"
    ballerinaStdLibs "org.ballerinalang:file-ballerina:${stdlibFileVersion}"
    ballerinaStdLibs "org.ballerinalang:task-ballerina:${stdlibTaskVersion}"
    ballerinaStdLibs "org.ballerinalang:uuid-ballerina:${stdlibUuidVersion}"
}

task unpackJballerinaTools(type: Copy) {
    configurations.jbalTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File("${buildDir}/target/extracted-distributions", "jballerina-tools-zip")
    }
}

task copyDistribution(type: Copy) {
    from ballerinaDistPath
    into ballerinaDist
}

task unpackStdLibs() {
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${buildDir}/target/extracted-distributions", artifact.name + "-zip")
            }
        }
    }
}

task copyStdlibsForTest(type: Copy) {
    dependsOn(unpackJballerinaTools)
    dependsOn(unpackStdLibs)

    into ballerinaDist

    /* Standard Libraries */
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${buildDir}/target/extracted-distributions/" + artifact.name + "-zip"
        into("repo/bala") {
            from "${artifactExtractedPath}/bala/"
        }
        into("repo/cache") {
            from "${artifactExtractedPath}/cache"
        }
    }
}

task copyPackageBalaForTest {
    doLast {
        copy {
            from "${ballerinaModulePath}/build/cache_parent"
            into "${ballerinaDist}/repo"
            copy {
                into("bala/ballerinax") {
                    from "bala/ballerinax"
                }
            }
            copy {
                into("cache/ballerinax/") {
                    from "cache/ballerinax"
                }
            }
        }
    }
}

test {
    systemProperty "ballerina.offline.flag", "true"
    useJUnitPlatform()
}

copyDistribution.dependsOn unpackJballerinaTools
unpackStdLibs.dependsOn copyDistribution
copyStdlibsForTest.dependsOn unpackStdLibs
copyPackageBalaForTest.dependsOn copyStdlibsForTest
test.dependsOn copyPackageBalaForTest