/*
 * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'java-library'
    id 'com.github.spotbugs'
    id 'checkstyle'
    id 'jacoco'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

description = 'Ballerina - Salesforce Native'

configurations {
    jacocoRuntime
}

dependencies {
    jacocoRuntime "org.jacoco:org.jacoco.agent:${jacocoToolVersion}:runtime"
    implementation group: 'org.eclipse.jetty', name: 'jetty-util', version: "${jettyVersion}"
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "${jacksonDatabindVersion}"
    implementation group: 'org.cometd.java', name: 'cometd-java-client', version: "${cometdJavaClientVersion}"
    implementation group: 'com.google.code.gson', name: 'gson', version: "${gsonVersion}"
    implementation group: 'org.json', name: 'json', version: "${jsonVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-lang', version: "${ballerinaLangVersion}"
    implementation(group: 'org.ballerinalang', name: 'ballerina-runtime', version: "${ballerinaLangVersion}") {
        transitive = false
    }
    checkstyle project(":checkstyle")
    checkstyle "com.puppycrawl.tools:checkstyle:${checkstylePluginVersion}"
    implementation "com.opencsv:opencsv:${openCsvVersion}"
    implementation group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jVersion}"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

sourceCompatibility = JavaVersion.VERSION_21

jacoco {
    toolVersion = "0.8.10"
}

test {
    testLogging {
        showStackTraces = true
        showStandardStreams = true
        events "failed"
        exceptionFormat "full"
    }
    jacoco {
        enabled = true
        destinationFile = file("$buildDir/coverage-reports/jacoco.exec")
        includeNoLocationClasses = true
    }
}

spotbugsMain {
    def classLoader = plugins["com.github.spotbugs"].class.classLoader
    def SpotBugsConfidence = classLoader.findLoadedClass("com.github.spotbugs.snom.Confidence")
    def SpotBugsEffort = classLoader.findLoadedClass("com.github.spotbugs.snom.Effort")
    effort = SpotBugsEffort.MAX
    reportLevel = SpotBugsConfidence.LOW
    ignoreFailures = true
    reportsDir = file("$project.buildDir/reports/spotbugs")
    def excludeFile = file("${rootDir}/build-config/spotbugs-exclude.xml")
    if (excludeFile.exists()) {
        it.excludeFilter = excludeFile
    }
    reports {
        text.enabled = true
    }
}

repositories {
    mavenCentral()
}

spotbugsTest {
    enabled = false
}

task validateSpotbugs() {
    doLast {
        if (spotbugsMain.reports.size() > 0 &&
                spotbugsMain.reports[0].destination.exists() &&
                spotbugsMain.reports[0].destination.text.readLines().size() > 0) {
            spotbugsMain.reports[0].destination?.eachLine {
                println 'Failure: ' + it
            }
            throw new GradleException("Spotbugs rule violations were found.");
        }
    }
}

checkstyle {
    toolVersion "${checkstylePluginVersion}"
    configFile file("${rootDir}/build-config/checkstyle/build/checkstyle.xml")
    configProperties = ["suppressionFile": file("${rootDir}/build-config/checkstyle/build/suppressions.xml")]
}

tasks.withType(Checkstyle) {
    exclude '**/module-info.java'
}

spotbugsMain.finalizedBy validateSpotbugs
checkstyleMain.dependsOn ':checkstyle:downloadCheckstyleRuleFiles'

shadowJar {
    configurations = [project.configurations.shadow]
    dependencies {
        exclude(dependency('org.slf4j:.*:.*'))
    }
}

build.dependsOn(shadowJar)
