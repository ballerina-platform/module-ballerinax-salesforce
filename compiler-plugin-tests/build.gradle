/*
 * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/*
 * Tests for compiler plugin
 * This build file depends on the sfdc-ballerina project build which produces the .bala
 * This build not enabled in the main build currently
 */

plugins {
    id 'java'
}

description = 'Ballerina - SFDC Compiler Plugin Test'

configurations {
   jbalTools
}

def ballerinaModulePath = "${project.rootDir}/"
def ballerinaDistPath = "${ballerinaModulePath}/build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
def ballerinaDist = "${buildDir}/target/ballerina-distribution"


dependencies {
    /* JBallerina Tools */
    jbalTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
    testImplementation group: 'org.ballerinalang', name: 'ballerina-lang', version: "${ballerinaLangVersion}"
    testImplementation group: 'org.ballerinalang', name: 'ballerina-tools-api', version: "${ballerinaLangVersion}"
    testImplementation group: 'org.ballerinalang', name: 'ballerina-parser', version: "${ballerinaLangVersion}"
    testImplementation project(":emp-wrapper")
    testImplementation project(":compiler-plugin")

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}


task unpackJballerinaTools(type: Copy) {
   configurations.jbalTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
       from zipTree(artifact.getFile())
       into new File("${buildDir}/target/extracted-distributions", "jballerina-tools-zip")
   }
}

task copyDistributionForTest(type: Copy) {
    from ballerinaDistPath
    into ballerinaDist
}

task unpackStdLibs() {
   doLast {
       configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
           copy {
               from project.zipTree(artifact.getFile())
               into new File("${buildDir}/target/extracted-distributions", artifact.name + "-zip")
           }
       }
   }
}

task copyStdlibsForTest(type: Copy) {
   dependsOn(unpackJballerinaTools)
   dependsOn(unpackStdLibs)

   into ballerinaDist

   /* Standard Libraries */
   configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
       def artifactExtractedPath = "${buildDir}/target/extracted-distributions/" + artifact.name + "-zip"
       into("repo/bala") {
           from "${artifactExtractedPath}/bala/"
       }
       into("repo/cache") {
           from "${artifactExtractedPath}/cache"
       }
   }
}

task copySfdcPackageBalaForTest {
    doLast {
        copy {
            from "${ballerinaModulePath}/build/cache_parent"
            into "${ballerinaDist}/repo"
            copy {
                into("bala/ballerina") {
                    from "bala/ballerina"
                }
            }
            copy {
                into("cache/ballerina/") {
                    from "cache/ballerina"
                }
            }
        }
    }
}

test {
    systemProperty "ballerina.offline.flag", "true"
    useJUnitPlatform()
}

copyDistributionForTest.dependsOn ":sfdc:build"
copyDistributionForTest.dependsOn unpackJballerinaTools
unpackStdLibs.dependsOn copyDistributionForTest
copyStdlibsForTest.dependsOn unpackStdLibs
copySfdcPackageBalaForTest.dependsOn copyStdlibsForTest
test.dependsOn copySfdcPackageBalaForTest
